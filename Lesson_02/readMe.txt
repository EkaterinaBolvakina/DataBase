1. Проектирование БД при помощи https://drawsql.app/
2. Cвязи между таблицами
3. JOIN-операции

## **Как связать таблицы в PostgreSQL и получить нужные данные?**
Связывание таблиц в PostgreSQL осуществляется с помощью оператора JOIN. Оператор JOIN позволяет объединять строки из двух или более таблиц в зависимости от заданных условий.

**Внешний ключ**
Для связывания таблиц в PostgreSQL используются внешние ключи. Внешний ключ в таблице связывает ее с другой таблицей, указывая идентификатор связанной записи.

**Способы связывания таблиц**
**Один-к-одному (One-to-One)**
Каждая запись в одной таблице связана с одной записью в другой таблице.
![d290ad47ba8a75625041f2281ee8be13.png](:/9dd21a1026de478bb3e2fe5ba4fdb858)

**Один-ко-многим (One-to-Many)**
Каждая запись в одной таблице связана с несколькими записями в другой таблице.
https://www.datensen.com/blog/wp-content/uploads/2021/10/one-to-many-relationship.png
![c5447143f238ee02edb187e3cb356713.png](:/525c2731e72f4faba99649fa20545bb9)

**Многие-ко-многим (Many-to-Many)**
Каждая запись в одной таблице может быть связана с несколькими записями в другой таблице, и наоборот.
![bbbe757307a7137a01518a994b82567c.png](:/9dfdb988fd2c42f2913ff1fb509385dd)

**Примеры связи
Один-к-одному (One-to-One)**
CREATE TABLE employees (
  id integer PRIMARY KEY,
  name varchar(100)
);

CREATE TABLE contact_info (
  employee_id integer REFERENCES employees(id) UNIQUE,
  email text,
  phone_number varchar(9)
);
**Один-ко-многим (One-to-Many)**
CREATE TABLE orders (
  order_number integer,
  customer_id integer REFERENCES customers(id),
);

CREATE TABLE customers (
  id integer PRIMARY KEY,
  name text
);
**Многие-ко-многим (Many-to-Many)**
CREATE TABLE songs (
  id integer PRIMARY KEY,
  name varchar(100)
);

CREATE TABLE artists (
  id integer PRIMARY KEY,
  name varchar(100)
);

CREATE TABLE songs_artists (
  artist_id integer REFERENCES artists(id),
  song_id integer REFERENCES songs(id),
  PRIMARY KEY (artist_id, song_id)
);
## **Пример JOIN**
SELECT
  *
FROM
  product
  JOIN category ON category.id = product.category_id;
  
## **Преимущества связывания таблиц:**
**1. Исключение повторений данных:** связывание позволяет избежать дублирования информации в разных таблицах. Например, если в базе данных есть таблица «Пользователи» и таблица «Заказы», то связывание позволит связать каждый заказ с соответствующим пользователем, не дублируя информацию о пользователе в каждой записи заказа.
**2. Улучшение эффективности запросов:** при связывании таблиц можно выполнять запросы, отбирая данные из нескольких таблиц одним запросом. Это уменьшает количество запросов к базе данных и повышает производительность системы.
**3. Обеспечение целостности данных:** связывание таблиц позволяет определить связи между разными сущностями в базе данных и задать ограничения на значения ключевых полей. Например, при связывании таблиц «Пользователи» и «Заказы» можно задать ограничение, что каждый заказ должен быть связан с существующим пользователем.
**4. Связывание таблиц** является одним из **важнейших инструментов** реляционных баз данных, таких как PostgreSQL. Оно помогает **организовать структуру данных, улучшить производительность системы и обеспечить целостность информации.**
